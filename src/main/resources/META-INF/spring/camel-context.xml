<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	
<import resource="classpath:broker.xml"/>
<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory" depends-on="broker">
   <property name="brokerURL" value="tcp://localhost:61616" />
</bean>

<!-- <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop"> -->
<!--    <property name="maxConnections" value="8" /> -->
<!--    <property name="connectionFactory" ref="jmsConnectionFactory" /> -->
<!-- </bean> -->
 
<bean id="jmsConfig"  class="org.apache.camel.component.jms.JmsConfiguration">
   <property name="connectionFactory" ref="jmsConnectionFactory"/>
   <property name="concurrentConsumers" value="5"/>
</bean>

<bean id="myactivemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="configuration" ref="jmsConfig"/>
    <property name="usePooledConnection" value="true"></property>
</bean>


	<camelContext xmlns="http://camel.apache.org/schema/spring" trace="true">
    <camel:contextScan/>
    
    
<!-- Camel JMSProducer to be able to send messages to a remote Active MQ server -->

    
    
    <camel:endpoint uri="file:src/data/Input?noop=true" id="inFiles"/>
    <camel:endpoint uri="file:src/data/Unzip?noop=true" id="inUnZipFiles"/>
    <camel:route>
        <camel:from ref="inFiles"/>
        <camel:choice>
        	<camel:when>
        		<camel:simple>${header.CamelFileName} regex '^.*zip$'</camel:simple>
        		<camel:unmarshal ref="zipFileDataFormat"/>
        		 <camel:split streaming="true">
		            <camel:simple>${body}</camel:simple>
		            <camel:to uri="file:src/data/Unzip?noop=true&amp;fileName=${header.CamelFileRelativePath}/${header.CamelFileName}" id="singleFile"/>
		        </camel:split>
		        <camel:process ref="myProcessor1"/>
        	</camel:when>
        	<camel:otherwise>
        		<camel:log message="FILE NON ELABORATO : ${file:name}"/>
        	</camel:otherwise>
        </camel:choice>
    </camel:route>
    
    
    
<!--      <camel:route> -->
<!--         <camel:from ref="inUnZipFiles"/> -->
<!--         <camel:choice> -->
<!--         	<camel:when> -->
<!--         		<camel:simple>${header.CamelFileName} regex '^.*XML$'</camel:simple> -->
<!--         		<camel:doTry> -->
<!-- 			        <camel:to uri="validator:xsd/save-fatture.xsd"/> -->
<!-- 			        <camel:process ref="myProcessor2"/> -->
<!-- 			        <to uri="jms:xmlValid"/> -->
<!-- 			        <camel:to uri="myactivemq:queue:elaboraxml"/> -->
<!-- 			        <camel:log message="MESSAGGIO INOLTRATO ALLA CODA"/> -->
<!-- 			        <camel:doCatch> -->
<!-- 			            <camel:exception>org.apache.camel.ValidationException</camel:exception> -->
<!-- 			            <camel:log message="VALIDAZIONE XSD FALLITA : ${file:name}"/> -->
<!-- 			            <camel:process ref="myProcessor3"/> -->
<!-- 			        </camel:doCatch> -->
<!-- 			        <camel:doFinally> -->
<!-- 			            <camel:log message="FINALLY"/> -->
<!-- 			        </camel:doFinally> -->
<!-- 			    </camel:doTry> -->
<!--         	</camel:when> -->
<!--         	<camel:otherwise> -->
<!--         		<camel:log message="FILE CONTENUTO NELLO ZIP NON ELABORATO: ${file:name}"/> -->
<!--         	</camel:otherwise> -->
<!--         </camel:choice> -->
    
<!--     </camel:route> -->
             
       <camel:route>
        <camel:from uri="myactivemq:queue:elaboraxml"/>
        <camel:process ref="myProcessor2"/>
      </camel:route>
	
  
</camelContext>
 
	<bean id="zipFileDataFormat" class="org.apache.camel.dataformat.zipfile.ZipFileDataFormat">
		<property name="usingIterator" value="true" />
	</bean>
 
	
	 
	<bean id="myProcessor1" class="com.mycompany.camel.spring.MyProcessorStep1"/>
	<bean id="myProcessor2" class="com.mycompany.camel.spring.MyProcessorStep2"/>
	<bean id="myProcessor3" class="com.mycompany.camel.spring.MyProcessorStep3"/>


</beans>
